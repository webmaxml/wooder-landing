@use '../functions/types' as *;
@use '../functions/list';
@use '../functions/number';
@use '../functions/calc';
@use 'output';

// <<{ _is-fluid() - checks if value is fluid (value is list with first element as 'fluid')

@function _is-fluid($value) { 
  @return is($value, 'list') and list.first($value) == 'fluid'; 
} 

// }>>

// <<{ _is-breakpoints() - checks if value is breakpoints (map)

@function _is-breakpoints($value) { 
  @return is($value, 'map'); 
}

// }>>

// <<{ _is-value-with-breakpoints() - checks if value is value with breakpoints

@function _is-value-with-breakpoints($value) {
  @return is($value, 'list') and is(list.last($value), 'map') and list.first($value) != 'fluid'; 
}

// }>>

// <<{ _set-fluid-values() - contructs fluid value

@function _set-fluid-values($value, $key, $bps) {
  @if list.is-last($bps, $value) { @return number.to-px($value); }

  $next-key: list.next-key($bps, $key);
  $next-value: list.next-value($bps, $value);
  @return calc.fluid($key, $next-key, $value, $next-value);
}

// }>>

// <<{ p - outputs fluid and breakpoints values in css

// fluid - fluid (320: 60px, 1280: 100px)
// breakpoints - (320: block, 768: none)
// value with breakpoints - block (768: flex, 1024: none)

@mixin p($prop, $value) {
  $prop: validate($prop, 'string');

  $val: $value;
  $bps: null;

  @if _is-fluid($value) { 
    $val: number.to-px(list.first(list.last($value)));
    $bps: list.map-keys(list.last($value), get-function('to-px', $module: 'number'));
    $bps: list.map($bps, get-function('_set-fluid-values'));
  }

  @if _is-breakpoints($value) {
    $val: null;
    $bps: list.map-keys($value, get-function('to-px', $module: 'number'));
  }

  @if _is-value-with-breakpoints($value) { 
    $val: list.remove($value, list.last($value));
    $bps: list.map-keys(list.last($value), get-function('to-px', $module: 'number')); 
  }

  @if $val { @include output.prop($prop, $val) };
  @if $bps { @include output.breakpoints($prop, $bps); }
}

// }>>

